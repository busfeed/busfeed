<div class="container">
   <div class="row">
      <div class="text-center">
         <h1>Hello, {{username}}.</h1>
      </div>
      <div class="col-sm-8 col-md-10 col-md-offset-1">
         <button class="btn btn-primary btn-block" style="margin-bottom: 5px;" onclick="this.innerHTML='Searching...'; this.disabled=true; closestStop();">Find closest stop</button>
         <span class="label label-default" style="margin-bottom: 5px; padding: 10px; display: block; text-align: left; font-size: 1.25em;">
            Feed
         </span>
         <div class="list-group" id="feed"></div>
      </div>
   </div>
</div>

<script>
function badgeColor(pings) {
   var color = "999999";
   if (pings > 0) {
      var c1 = "FFCC12";
      var c2 = "AD0000";
      var ratio = Math.min(pings, 10) / 10;
      var R = Math.round(parseInt(c1.substr(0, 2), 16) + (parseInt(c2.substr(0, 2), 16) - parseInt(c1.substr(0, 2), 16)) * ratio);
      var G = Math.round(parseInt(c1.substr(2, 2), 16) + (parseInt(c2.substr(2, 2), 16) - parseInt(c1.substr(2, 2), 16)) * ratio);
      var B = Math.round(parseInt(c1.substr(4, 2), 16) + (parseInt(c2.substr(4, 2), 16) - parseInt(c1.substr(4, 2), 16)) * ratio);
      function pad(str) {
         return (str.length > 1) ? str : "0"+str;
      }
      R = pad(R.toString(16));
      G = pad(G.toString(16));
      B = pad(B.toString(16));
      color = R+G+B;
      console.log(color, R, G, B);
   }
   return color;
}

$(document).ready(
   $.getJSON("../data/feed", function(json) {
      console.log(json);
      if (json.feed.length > 0) {
         for (var stop in json.feed) {
            var id = json.feed[stop].id;
            var name = json.feed[stop].name;
            var pings = json.feed[stop].pings;
            var color = badgeColor(pings);
            $('#feed').append("<a href='/detail?id=" + id + "' class='list-group-item'>" + name + "<span class='badge' style='background-color: #" + color + ";'>" + pings + "</span></a>");
         }
         $('#feed').append("<a href='/findstop' class='list-group-item'>Add Stop<i class='glyphicon glyphicon-plus' style='float: right;'></i></a>");
      }
      else {
         $('#feed').append("<a href='/findstop' class='list-group-item'><h4 class='list-group-item-heading'>No stops tracked!</h4><p class='list-group-item-text'>Press to add stops.</p></a>");
      }
   })
);

function closestStop() {
   $.getJSON("../data/geos", function(json) {
      console.log(json);

      if (navigator.geolocation) {
         var service = new google.maps.DistanceMatrixService();
         navigator.geolocation.getCurrentPosition(function(position) {
            var start = {
               lat: position.coords.latitude,
               lng: position.coords.longitude
            };

            var distance = Number.MAX_SAFE_INTEGER;
            var closest;

            var i = 0;
            var stop = json.locations[i];
            var dest = {
               lat: stop.geo.lat,
               lng: stop.geo.long
            };

            function checkNearest(response, status) {
               if (status == 'OK') {
                  var d = response.rows[0].elements[0].distance.value;
                  if (d < distance) {
                     console.log(stop.id, i, response.rows[0].elements[0].distance.value);
                     distance = d;
                     closest = json.locations[i];
                  }

                  if (i < json.locations.length - 1) {
                     i++;
                     stop = json.locations[i];
                     dest = {
                        lat: stop.geo.lat,
                        lng: stop.geo.long
                     };
                     service.getDistanceMatrix({
                        origins: [start],
                        destinations: [dest],
                        travelMode: 'WALKING'
                     }, checkNearest);
                  }
                  else {
                     console.log("stop found");
                     window.location.replace('/detail/'+closest.id);
                  }
               }
            }

            service.getDistanceMatrix({
               origins: [start],
               destinations: [dest],
               travelMode: 'WALKING'
            }, checkNearest);
         }, function() {
            alert("Geolocation service failed.");
         });
      } else {
         alert("Geolocation not enabled.");
      }
   });
}
</script>

<script async defer
    src="https://maps.googleapis.com/maps/api/js?key={{mapsKey}}">
    </script>
